#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt { tapping-term-ms = <400>; };

/ {
    input_configs {
        compatible = "zmk,input-configs";

        mmv {
            device = <&mmv>;
            scale-multiplier = <10>;
        };
    };

    behaviors {
        htl: hold_tap_leader {
            label = "leader_hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        EAE_behavior: EAE_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "EAE_BEHAVIOR";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp E>, <&kp SEMICOLON>;
        };

        OOE_behavior: OOE_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "OOE_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&kp O>, <&kp SQT>;

            tapping-term-ms = <500>;
        };

        SAA_behavior: SAA_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "SAA_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LEFT_BRACKET>;
        };
    };

    macros {
        tilde: tilde {
            label = "macro_tilde";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RBKT) &kp RA(RBKT)>;
        };

        btick: btick {
            label = "macro_btick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PLUS &kp PLUS>;
        };

        hat: hat {
            label = "macro_hat";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RBRC &kp RBRC>;
        };

        copy: copy {
            label = "macro_copy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
        };

        paste: paste {
            label = "macro_paste";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_aa {
            timeout-ms = <30>;
            key-positions = <17 18>;
            layers = <0>;
            bindings = <&kp LBKT>;
        };

        combo_ae {
            timeout-ms = <30>;
            key-positions = <7 8>;
            layers = <0>;
            bindings = <&kp SEMI>;
        };

        combo_ao {
            timeout-ms = <30>;
            key-positions = <27 28>;
            layers = <0>;
            bindings = <&kp SQT>;
        };

        combo_x {
            timeout-ms = <30>;
            key-positions = <11 12>;
            layers = <0>;
            bindings = <&kp X>;
        };

        combo_q {
            timeout-ms = <30>;
            key-positions = <21 22>;
            layers = <0>;
            bindings = <&kp Q>;
        };

        Bootloader-Left {
            bindings = <&bootloader>;
            key-positions = <0 4>;
        };

        Bootloader-Right {
            bindings = <&bootloader>;
            key-positions = <5 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W  &kp F  &kp P        &kp B        &kp J     &kp L            &kp U      &kp Y       &kp COLON
&mt LEFT_SHIFT A  &kp R  &kp S  &kp T        &kp G        &kp M     &kp N            &kp E      &kp I       &mt RIGHT_SHIFT O
&mt LCTRL Z       &kp X  &kp C  &kp D        &kp V        &kp K     &kp H            &kp COMMA  &kp PERIOD  &mt RCTRL ENTER
                                &lt 5 SPACE  &lt 6 ESC    &htl 3 1  &lt 7 BACKSPACE
            >;
        };

        symbol_1_layer {
            bindings = <
&trans    &kp RA(N4)     &kp RA(N2)  &kp RPAR     &trans       &trans     &kp NUBS        &kp UNDER   &kp MINUS  &trans
&btick    &kp RA(EQUAL)  &kp LS(N2)  &kp LS(DOT)  &kp PRCNT    &kp ASTRK  &kp FSLH        &kp CARET   &kp AMPS   &kp PIPE
&sk LALT  &trans         &kp LS(N3)  &kp DOT      &trans       &trans     &kp RA(N7)      &kp RA(N8)  &tilde     &trans
                                     &skq LSHIFT  &skq LGUI    &sl 2      &skq BACKSPACE
            >;
        };

        symbol_2_layer {
            bindings = <
&trans     &trans  &trans    &trans         &trans    &trans    &kp LS(NUBS)  &kp EXCL    &trans        &trans
&kp EQUAL  &trans  &kp BSLH  &kp LS(COMMA)  &trans    &kp LPAR  &kp LS(FSLH)  &trans      &kp RA(NUBS)  &trans
&sl 4      &trans  &trans    &kp COMMA      &trans    &trans    &kp RA(N0)    &kp RA(N9)  &hat          &trans
                             &trans         &trans    &trans    &trans
            >;
        };

        number_navigation_layer {
            bindings = <
&trans          &kp N1  &kp N2  &kp N3  &trans    &kp C_VOLUME_UP    &kp PAGE_UP     &kp UP_ARROW    &kp HOME         &trans
&kp LEFT_SHIFT  &kp N4  &kp N5  &kp N6  &kp N0    &kp C_VOLUME_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LCTRL       &kp N7  &kp N8  &kp N9  &trans    &kp PRINTSCREEN    &kp PAGE_DOWN   &trans          &kp END          &trans
                                &trans  &trans    &trans             &trans
            >;
        };

        settings_layer {
            bindings = <
&trans  &bootloader  &trans  &trans      &trans          &trans  &trans  &trans  &trans  &bootloader
&trans  &trans       &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &trans
&trans  &trans       &trans  &bt BT_CLR  &trans          &trans  &trans  &trans  &trans  &trans
                             &trans      &to 0           &trans  &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans      &msc SCRL_UP  &kp SPACE  &msc SCRL_DOWN  &trans    &trans  &trans          &mmv MOVE_UP    &trans           &trans
&kp LSHIFT  &mkp LCLK     &mkp MCLK  &mkp RCLK       &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&kp LCTRL   &trans        &kp LALT   &trans          &trans    &trans  &trans          &trans          &trans           &trans
                                     &trans          &trans    &trans  &kp BACKSPACE
            >;
        };

        shortcut_layer {
            bindings = <
&trans        &trans       &trans  &trans   &trans    &trans         &kp LC(N1)       &kp LC(N2)  &kp LC(N3)     &trans
&kp LEFT_ALT  &kp LS(TAB)  &trans  &kp TAB  &trans    &kp LS(LC(W))  &kp LS(LC(TAB))  &kp LC(W)   &kp LC(TAB)    &trans
&trans        &kp LC(Z)    &copy   &paste   &trans    &trans         &trans           &trans      &kp LS(LC(I))  &trans
                                   &trans   &trans    &trans         &kp DEL
            >;
        };

        function_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2   &kp F3   &kp F4
&trans  &trans  &trans  &trans  &trans    &trans  &kp F5  &kp F6   &kp F7   &kp F8
&trans  &trans  &trans  &trans  &trans    &trans  &kp F9  &kp F10  &kp F11  &kp F12
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
